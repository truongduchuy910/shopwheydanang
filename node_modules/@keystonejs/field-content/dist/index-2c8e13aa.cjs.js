'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var React = require('react');

var React__default = _interopDefault(React);

function useScrollListener(handler) {
  React.useEffect(() => {
    window.addEventListener('scroll', handler);
    return () => window.removeEventListener('scroll', handler);
  }, [handler]);
}

let isBrowser = typeof window !== 'undefined';

function getSize() {
  if (isBrowser) {
    return {
      innerHeight: window.innerHeight,
      innerWidth: window.innerWidth
    };
  }

  return {
    innerHeight: 0,
    innerWidth: 0
  };
}

function useWindowSize() {
  let [windowSize, setWindowSize] = React.useState(getSize());
  React.useEffect(() => {
    function handleResize() {
      setWindowSize(getSize());
    }

    window.addEventListener('resize', handleResize);
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, [setWindowSize]);
  return windowSize;
}

function useStateWithEqualityCheck(initialValue) {
  let [value, _setValue] = React.useState(initialValue);
  let setValue = React.useCallback(newValue => {
    if (newValue !== value) {
      _setValue(newValue);
    }
  }, [value]);
  return [value, setValue];
}

exports.useScrollListener = useScrollListener;
exports.useStateWithEqualityCheck = useStateWithEqualityCheck;
exports.useWindowSize = useWindowSize;
