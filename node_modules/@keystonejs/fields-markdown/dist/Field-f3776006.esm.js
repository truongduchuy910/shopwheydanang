import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import _extends from '@babel/runtime/helpers/esm/extends';
import React, { useState, useMemo, forwardRef } from 'react';
import { jsx } from '@emotion/core';
import { A11yText } from '@arch-ui/typography';
import Tooltip from '@arch-ui/tooltip';
import { gridSize, colors, borderRadius } from '@arch-ui/theme';
import { FieldContainer, FieldLabel } from '@arch-ui/fields';
import 'codemirror';
import 'codemirror/mode/markdown/markdown';
import 'codemirror/mode/gfm/gfm';
import { Controlled } from 'react-codemirror2';
import { BoldIcon, ItalicIcon, QuoteIcon, LinkIcon, FileMediaIcon, ListUnorderedIcon, ListOrderedIcon } from '@arch-ui/icons';
let styles = "\n  /* BASICS */\n\n  .CodeMirror {\n    /* Set height, width, borders, and global font properties here */\n    font-family: monospace;\n    height: 300px;\n    color: black;\n  }\n\n  /* PADDING */\n\n  .CodeMirror-lines {\n    padding: 4px 0; /* Vertical padding around content */\n  }\n  .CodeMirror pre {\n    padding: 0 4px; /* Horizontal padding of content */\n  }\n\n  .CodeMirror-scrollbar-filler,\n  .CodeMirror-gutter-filler {\n    background-color: white; /* The little square between H and V scrollbars */\n  }\n\n  /* GUTTER */\n\n  .CodeMirror-gutters {\n    border-right: 1px solid #ddd;\n    background-color: #f7f7f7;\n    white-space: nowrap;\n  }\n  .CodeMirror-linenumbers {\n  }\n  .CodeMirror-linenumber {\n    padding: 0 3px 0 5px;\n    min-width: 20px;\n    text-align: right;\n    color: #999;\n    -moz-box-sizing: content-box;\n    box-sizing: content-box;\n  }\n\n  .CodeMirror-guttermarker {\n    color: black;\n  }\n  .CodeMirror-guttermarker-subtle {\n    color: #999;\n  }\n\n  /* CURSOR */\n\n  .CodeMirror div.CodeMirror-cursor {\n    border-left: 1px solid black;\n  }\n  /* Shown when moving in bi-directional text */\n  .CodeMirror div.CodeMirror-secondarycursor {\n    border-left: 1px solid silver;\n  }\n  .CodeMirror.cm-fat-cursor div.CodeMirror-cursor {\n    width: auto;\n    border: 0;\n    background: #7e7;\n  }\n  .CodeMirror.cm-fat-cursor div.CodeMirror-cursors {\n    z-index: 1;\n  }\n\n  .cm-animate-fat-cursor {\n    width: auto;\n    border: 0;\n    -webkit-animation: blink 1.06s steps(1) infinite;\n    -moz-animation: blink 1.06s steps(1) infinite;\n    animation: blink 1.06s steps(1) infinite;\n  }\n  @-moz-keyframes blink {\n    0% {\n      background: #7e7;\n    }\n    50% {\n      background: none;\n    }\n    100% {\n      background: #7e7;\n    }\n  }\n  @-webkit-keyframes blink {\n    0% {\n      background: #7e7;\n    }\n    50% {\n      background: none;\n    }\n    100% {\n      background: #7e7;\n    }\n  }\n  @keyframes blink {\n    0% {\n      background: #7e7;\n    }\n    50% {\n      background: none;\n    }\n    100% {\n      background: #7e7;\n    }\n  }\n\n  /* Can style cursor different in overwrite (non-insert) mode */\n  div.CodeMirror-overwrite div.CodeMirror-cursor {\n  }\n\n  .cm-tab {\n    display: inline-block;\n    text-decoration: inherit;\n  }\n\n  .CodeMirror-ruler {\n    border-left: 1px solid #ccc;\n    position: absolute;\n  }\n\n  /* DEFAULT THEME */\n\n  .cm-s-default .cm-keyword {\n    color: #708;\n  }\n  .cm-s-default .cm-atom {\n    color: #219;\n  }\n  .cm-s-default .cm-number {\n    color: #164;\n  }\n  .cm-s-default .cm-def {\n    color: #00f;\n  }\n  .cm-s-default .cm-variable,\n  .cm-s-default .cm-punctuation,\n  .cm-s-default .cm-property,\n  .cm-s-default .cm-operator {\n  }\n  .cm-s-default .cm-variable-2 {\n    color: #05a;\n  }\n  .cm-s-default .cm-variable-3 {\n    color: #085;\n  }\n  .cm-s-default .cm-comment {\n    color: #a50;\n  }\n  .cm-s-default .cm-string {\n    color: #a11;\n  }\n  .cm-s-default .cm-string-2 {\n    color: #f50;\n  }\n  .cm-s-default .cm-meta {\n    color: #555;\n  }\n  .cm-s-default .cm-qualifier {\n    color: #555;\n  }\n  .cm-s-default .cm-builtin {\n    color: #30a;\n  }\n  .cm-s-default .cm-bracket {\n    color: #997;\n  }\n  .cm-s-default .cm-tag {\n    color: #170;\n  }\n  .cm-s-default .cm-attribute {\n    color: #00c;\n  }\n  .cm-s-default .cm-header {\n    color: blue;\n  }\n  .cm-s-default .cm-quote {\n    color: #090;\n  }\n  .cm-s-default .cm-hr {\n    color: #999;\n  }\n  .cm-s-default .cm-link {\n    color: #00c;\n  }\n\n  .cm-negative {\n    color: #d44;\n  }\n  .cm-positive {\n    color: #292;\n  }\n  .cm-header,\n  .cm-strong {\n    font-weight: bold;\n  }\n  .cm-em {\n    font-style: italic;\n  }\n  .cm-link {\n    text-decoration: underline;\n  }\n  .cm-strikethrough {\n    text-decoration: line-through;\n  }\n\n  .cm-s-default .cm-error {\n    color: #f00;\n  }\n  .cm-invalidchar {\n    color: #f00;\n  }\n\n  /* Default styles for common addons */\n\n  div.CodeMirror span.CodeMirror-matchingbracket {\n    color: #0f0;\n  }\n  div.CodeMirror span.CodeMirror-nonmatchingbracket {\n    color: #f22;\n  }\n  .CodeMirror-matchingtag {\n    background: rgba(255, 150, 0, 0.3);\n  }\n  .CodeMirror-activeline-background {\n    background: #e8f2ff;\n  }\n\n  /* STOP */\n\n  /* The rest of this file contains styles related to the mechanics of\n   the editor. You probably shouldn't touch them. */\n\n  .CodeMirror {\n    position: relative;\n    overflow: hidden;\n    background: white;\n  }\n\n  .CodeMirror-scroll {\n    overflow: scroll !important; /* Things will break if this is overridden */\n    /* 30px is the magic margin used to hide the element's real scrollbars */\n    /* See overflow: hidden in .CodeMirror */\n    margin-bottom: -30px;\n    margin-right: -30px;\n    padding-bottom: 30px;\n    height: 100%;\n    outline: none; /* Prevent dragging from highlighting the element */\n    position: relative;\n    -moz-box-sizing: content-box;\n    box-sizing: content-box;\n  }\n  .CodeMirror-sizer {\n    position: relative;\n    border-right: 30px solid transparent;\n    -moz-box-sizing: content-box;\n    box-sizing: content-box;\n  }\n\n  /* The fake, visible scrollbars. Used to force redraw during scrolling\n   before actuall scrolling happens, thus preventing shaking and\n   flickering artifacts. */\n  .CodeMirror-vscrollbar,\n  .CodeMirror-hscrollbar,\n  .CodeMirror-scrollbar-filler,\n  .CodeMirror-gutter-filler {\n    position: absolute;\n    z-index: 6;\n    display: none;\n  }\n  .CodeMirror-vscrollbar {\n    right: 0;\n    top: 0;\n    overflow-x: hidden;\n    overflow-y: scroll;\n  }\n  .CodeMirror-hscrollbar {\n    bottom: 0;\n    left: 0;\n    overflow-y: hidden;\n    overflow-x: scroll;\n  }\n  .CodeMirror-scrollbar-filler {\n    right: 0;\n    bottom: 0;\n  }\n  .CodeMirror-gutter-filler {\n    left: 0;\n    bottom: 0;\n  }\n\n  .CodeMirror-gutters {\n    position: absolute;\n    left: 0;\n    top: 0;\n    z-index: 3;\n  }\n  .CodeMirror-gutter {\n    white-space: normal;\n    height: 100%;\n    -moz-box-sizing: content-box;\n    box-sizing: content-box;\n    display: inline-block;\n    margin-bottom: -30px;\n    /* Hack to make IE7 behave */\n    *zoom: 1;\n    *display: inline;\n  }\n  .CodeMirror-gutter-wrapper {\n    position: absolute;\n    z-index: 4;\n    height: 100%;\n  }\n  .CodeMirror-gutter-elt {\n    position: absolute;\n    cursor: default;\n    z-index: 4;\n  }\n  .CodeMirror-gutter-wrapper {\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n\n  .CodeMirror-lines {\n    cursor: text;\n    min-height: 1px; /* prevents collapsing before first draw */\n  }\n  .CodeMirror pre {\n    /* Reset some styles that the rest of the page might have set */\n    -moz-border-radius: 0;\n    -webkit-border-radius: 0;\n    border-radius: 0;\n    border-width: 0;\n    background: transparent;\n    font-family: inherit;\n    font-size: inherit;\n    margin: 0;\n    white-space: pre;\n    word-wrap: normal;\n    line-height: inherit;\n    color: inherit;\n    z-index: 2;\n    position: relative;\n    overflow: visible;\n    -webkit-tap-highlight-color: transparent;\n  }\n  .CodeMirror-wrap pre {\n    word-wrap: break-word;\n    white-space: pre-wrap;\n    word-break: normal;\n  }\n\n  .CodeMirror-linebackground {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: 0;\n  }\n\n  .CodeMirror-linewidget {\n    position: relative;\n    z-index: 2;\n    overflow: auto;\n  }\n\n  .CodeMirror-widget {\n  }\n\n  .CodeMirror-code {\n    outline: none;\n  }\n\n  .CodeMirror-measure {\n    position: absolute;\n    width: 100%;\n    height: 0;\n    overflow: hidden;\n    visibility: hidden;\n  }\n  .CodeMirror-measure pre {\n    position: static;\n  }\n\n  .CodeMirror div.CodeMirror-cursor {\n    position: absolute;\n    border-right: none;\n    width: 0;\n  }\n\n  div.CodeMirror-cursors {\n    visibility: hidden;\n    position: relative;\n    z-index: 3;\n  }\n  .CodeMirror-focused div.CodeMirror-cursors {\n    visibility: visible;\n  }\n\n  .CodeMirror-selected {\n    background: #d9d9d9;\n  }\n  .CodeMirror-focused .CodeMirror-selected {\n    background: #d7d4f0;\n  }\n  .CodeMirror-crosshair {\n    cursor: crosshair;\n  }\n  .CodeMirror ::selection {\n    background: #d7d4f0;\n  }\n  .CodeMirror ::-moz-selection {\n    background: #d7d4f0;\n  }\n\n  .cm-searching {\n    background: #ffa;\n    background: rgba(255, 255, 0, 0.4);\n  }\n\n  /* IE7 hack to prevent it from returning funny offsetTops on the spans */\n  .CodeMirror span {\n    *vertical-align: text-bottom;\n  }\n\n  /* Used to force a border model for a node */\n  .cm-force-border {\n    padding-right: 0.1px;\n  }\n\n  @media print {\n    /* Hide the cursor when printing */\n    .CodeMirror div.CodeMirror-cursors {\n      visibility: hidden;\n    }\n  }\n\n  /* See issue #2901 */\n  .cm-tab-wrap-hack:after {\n    content: '';\n  }\n\n  /* Help users use markselection to safely style text background */\n  span.CodeMirror-selectedtext {\n    background: none;\n  }\n\n  .cm-s-mirrormark .cm-m-markdown {\n    color: #000;\n    font-family: sans-serif;\n  }\n  .cm-s-mirrormark .cm-m-markdown.cm-header {\n    font-family: Menlo, Consolas, Monaco, 'Andale Mono', monospace;\n    font-weight: bold;\n  }\n  .cm-s-mirrormark .cm-m-markdown.cm-header-1 {\n    font-size: 28px;\n  }\n  .cm-s-mirrormark .cm-m-markdown.cm-header-2 {\n    font-size: 22px;\n  }\n  .cm-s-mirrormark .cm-m-markdown.cm-header-2 {\n    font-size: 18px;\n  }\n  .cm-s-mirrormark .cm-m-markdown.cm-quote {\n    color: #888;\n    background-color: rgba(128, 128, 128, 0.05);\n    padding: 5px;\n  }\n  .cm-s-mirrormark .cm-m-markdown.cm-quote,\n  .cm-s-mirrormark .cm-m-markdown.cm-string {\n    color: #888;\n  }\n  .cm-s-mirrormark .cm-m-markdown.cm-tag,\n  .cm-s-mirrormark .cm-m-markdown.cm-link {\n    color: #444;\n  }\n  .cm-s-mirrormark .cm-m-markdown.cm-comment {\n    color: #a50;\n    font-family: Menlo, Consolas, Monaco, 'Andale Mono', monospace;\n  }\n  .cm-s-mirrormark .cm-m-markdown.cm-m-xml,\n  .cm-s-mirrormark .cm-m-markdown.cm-bracket {\n    color: #170;\n    font-family: inherit;\n  }\n  .cm-s-mirrormark.CodeMirror.CodeMirror-has-preview .CodeMirror-scroll {\n    display: none;\n  }\n  .cm-s-mirrormark.CodeMirror.CodeMirror-has-preview .CodeMirror-preview {\n    display: block;\n  }\n  .cm-s-mirrormark.CodeMirror .CodeMirror-preview {\n    display: none;\n    height: auto !important;\n    overflow: visible !important;\n    padding: 30px 4%;\n    box-sizing: border-box;\n    font-family: sans-serif;\n  }\n  .cm-s-mirrormark.CodeMirror .CodeMirror-preview h1,\n  .cm-s-mirrormark.CodeMirror .CodeMirror-preview h2,\n  .cm-s-mirrormark.CodeMirror .CodeMirror-preview h3 {\n    font-fami: Menlo, Consolas, Monaco, 'Andale Mono', monospace;\n  }\n  .cm-s-mirrormark.CodeMirror .CodeMirror-preview pre,\n  .cm-s-mirrormark.CodeMirror .CodeMirror-preview code {\n    font-family: Menlo, Consolas, Monaco, 'Andale Mono', monospace;\n  }\n  .cm-s-mirrormark.CodeMirror .CodeMirror-fullscreen .CodeMirror-preview {\n    height: 100% !important;\n    overflow: scroll !important;\n  }\n  .mirrormark-toolbar li > a {\n    display: inline-block;\n    font: normal normal normal 14px/1 FontAwesome;\n    font-size: inherit;\n    text-rendering: auto;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    transform: translate(0, 0);\n  }\n  .mirrormark-toolbar li > a.pull-left {\n    margin-right: 0.3em;\n  }\n  .mirrormark-toolbar li > a.pull-right {\n    margin-left: 0.3em;\n  }\n  .mirrormark-toolbar .bold a:before {\n    content: '\\f032';\n  }\n  .mirrormark-toolbar .italicize a:before {\n    content: '\\f033';\n  }\n  .mirrormark-toolbar .blockquote a:before {\n    content: '\\f10d';\n  }\n  .mirrormark-toolbar .strikethrough a:before {\n    content: '\\f0cc';\n  }\n  .mirrormark-toolbar .link a:before {\n    content: '\\f0c1';\n  }\n  .mirrormark-toolbar .image a:before {\n    content: '\\f03e';\n  }\n  .mirrormark-toolbar .unorderedList a:before {\n    content: '\\f03a';\n  }\n  .mirrormark-toolbar .orderedList a:before {\n    content: '\\f0cb';\n  }\n  .mirrormark-toolbar .fullScreen a:before {\n    content: '\\f065';\n  }\n  .mirrormark-toolbar .preview a:before {\n    content: '\\f15b';\n  }\n  .cm-s-mirrormark.CodeMirror-fullscreen .mirrormark-toolbar .fullScreen a:before {\n    content: '\\f066';\n  }\n  .cm-s-mirrormark.CodeMirror-has-preview .mirrormark-toolbar .preview a:before {\n    content: '\\f016';\n  }\n  /* Toolbar Theme */\n  .mirrormark-toolbar {\n    background: #fff;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n    display: block;\n    width: 100%;\n    margin-top: 0;\n    margin-bottom: 0;\n    padding-left: 0;\n    padding-right: 0;\n    /* First level */\n  }\n  .mirrormark-toolbar li {\n    display: inline-block;\n    position: relative;\n    z-index: 1;\n  }\n  .mirrormark-toolbar li.fullScreen,\n  .mirrormark-toolbar li.preview {\n    float: right;\n  }\n  .mirrormark-toolbar li.has-nested:after {\n    content: '\\2304';\n    color: #888;\n    position: absolute;\n    bottom: 3px;\n    right: 3px;\n    font-size: 11px;\n    transform: scale(1.3, 1);\n  }\n  .mirrormark-toolbar li a {\n    background-color: #fff;\n    color: #888;\n    cursor: pointer;\n    display: block;\n    font-size: 16px;\n    height: 40px;\n    line-height: 40px;\n    text-align: center;\n    transition: color 0.2s linear;\n    width: 40px;\n  }\n  .mirrormark-toolbar li:hover a,\n  .mirrormark-toolbar li:hover.has-nested:after {\n    color: #000;\n  }\n  .mirrormark-toolbar li:hover ul {\n    display: block;\n  }\n  .mirrormark-toolbar li ul {\n    background: #e5e5e5;\n    display: none;\n    position: absolute;\n    top: 41px;\n    width: 150px;\n    z-index: 1000;\n  }\n  .mirrormark-toolbar li ul li {\n    float: none;\n    width: 100%;\n  }\n  .mirrormark-toolbar li ul li a {\n    background: transparent;\n    color: #888 !important;\n    font-family: 'Helvetica Neue', sans-serif;\n    font-size: 12px;\n    height: auto;\n    line-height: normal;\n    padding: 0.25rem 0.75rem;\n    text-align: left;\n    width: auto;\n  }\n  .mirrormark-toolbar li ul li:hover a {\n    color: black !important;\n  }\n  .cm-s-mirrormark {\n    font: 16px/1.7 Menlo, Consolas, Monaco, 'Andale Mono', monospace;\n    box-sizing: border-box;\n    height: auto;\n    margin: auto;\n    position: relative;\n    z-index: 0;\n  }\n  .cm-s-mirrormark .CodeMirror-scroll {\n    height: auto !important;\n    overflow: visible !important;\n    padding: 30px 4%;\n    box-sizing: border-box;\n  }\n  .cm-s-mirrormark.CodeMirror-fullscreen .CodeMirror-scroll {\n    height: 100% !important;\n    overflow: scroll !important;\n  }\n  .cm-s-mirrormark pre.CodeMirror-placeholder {\n    color: #999;\n  }\n\n  .CodeMirror-fullscreen {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    height: auto;\n    z-index: 9;\n  }\n\n  .CodeMirror-dialog {\n    position: absolute;\n    left: 0;\n    right: 0;\n    background: white;\n    z-index: 15;\n    padding: 0.1em 0.8em;\n    overflow: hidden;\n    color: #333;\n  }\n\n  .CodeMirror-dialog-top {\n    border-bottom: 1px solid #eee;\n    top: 0;\n  }\n\n  .CodeMirror-dialog-bottom {\n    border-top: 1px solid #eee;\n    bottom: 0;\n  }\n\n  .CodeMirror-dialog input {\n    border: none;\n    outline: none;\n    background: transparent;\n    width: 20em;\n    color: inherit;\n    font-family: monospace;\n  }\n\n  .CodeMirror-dialog button {\n    font-size: 70%;\n  }\n\n  .CodeMirror-search-match {\n    background: gold;\n    border-top: 1px solid orange;\n    border-bottom: 1px solid orange;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n    opacity: 0.5;\n  }\n"; // based on https://github.com/SquidDev/MirrorMark/blob/master/src/js/mirrormark.js

let getTools = cm => {
  function toggleBefore(insertion) {
    let doc = cm.getDoc();
    let cursor = doc.getCursor();

    if (doc.somethingSelected()) {
      let selections = doc.listSelections();
      let remove = null;
      cm.operation(function () {
        selections.forEach(function (selection) {
          let pos = [selection.head.line, selection.anchor.line].sort(); // Remove if the first text starts with it

          if (remove == null) {
            remove = doc.getLine(pos[0]).startsWith(insertion);
          }

          for (let i = pos[0]; i <= pos[1]; i++) {
            if (remove) {
              // Don't remove if we don't start with it
              if (doc.getLine(i).startsWith(insertion)) {
                doc.replaceRange('', {
                  line: i,
                  ch: 0
                }, {
                  line: i,
                  ch: insertion.length
                });
              }
            } else {
              doc.replaceRange(insertion, {
                line: i,
                ch: 0
              });
            }
          }
        });
      });
    } else {
      let line = cursor.line;

      if (doc.getLine(line).startsWith(insertion)) {
        doc.replaceRange('', {
          line: line,
          ch: 0
        }, {
          line: line,
          ch: insertion.length
        });
      } else {
        doc.replaceRange(insertion, {
          line: line,
          ch: 0
        });
      }
    }
  }

  function toggleAround(start, end) {
    let doc = cm.getDoc();
    let cursor = doc.getCursor();

    if (doc.somethingSelected()) {
      let selection = doc.getSelection();

      if (selection.startsWith(start) && selection.endsWith(end)) {
        doc.replaceSelection(selection.substring(start.length, selection.length - end.length), 'around');
      } else {
        doc.replaceSelection(start + selection + end, 'around');
      }
    } else {
      // If no selection then insert start and end args and set cursor position between the two.
      doc.replaceRange(start + end, {
        line: cursor.line,
        ch: cursor.ch
      });
      doc.setCursor({
        line: cursor.line,
        ch: cursor.ch + start.length
      });
    }
  }

  let tools = [{
    icon: BoldIcon,
    label: 'Bold',

    action() {
      cm.focus();
      toggleAround('**', '**');
    }

  }, {
    icon: ItalicIcon,
    label: 'Italicize',

    action() {
      cm.focus();
      this.toggleAround('*', '*');
    }

  }, {
    icon: QuoteIcon,
    label: 'Blockquote',

    action() {
      cm.focus();
      toggleBefore('> ');
    }

  }, {
    label: 'Strikethrough',
    icon: () => React.createElement("s", {
      "aria-hidden": true
    }, "S"),

    action() {
      cm.focus();
      toggleAround('~~', '~~');
    }

  }, {
    icon: LinkIcon,
    label: 'Link',

    action() {
      cm.focus();
      toggleAround('[', '](http://)');
    }

  }, {
    label: 'Image',
    icon: FileMediaIcon,

    action() {
      cm.focus();
      toggleAround('![', '](http://)');
    }

  }, {
    icon: ListUnorderedIcon,
    label: 'Unordered List',

    action() {
      cm.focus();
      toggleBefore('* ');
    }

  }, {
    icon: ListOrderedIcon,
    label: 'Ordered List',

    action() {
      cm.focus();
      toggleBefore('1. ');
    }

  }];
  return tools;
};

let ToolbarButton = forwardRef((props, ref) => {
  return jsx("button", _extends({
    type: "button",
    css: {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'transparent',
      border: 0,
      cursor: 'pointer',
      fontSize: 16,
      outline: 'none'
    },
    ref: ref
  }, props));
});

let IconToolbarButton = _ref => {
  let {
    isActive,
    label,
    icon,
    tooltipPlacement = 'top'
  } = _ref,
      props = _objectWithoutProperties(_ref, ["isActive", "label", "icon", "tooltipPlacement"]);

  return jsx(Tooltip, {
    placement: tooltipPlacement,
    css: {
      margin: gridSize * 2
    },
    content: label
  }, ref => jsx(ToolbarButton, _extends({
    type: "button",
    css: {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'transparent',
      border: 0,
      cursor: 'pointer',
      fontSize: 16,
      outline: 'none'
    },
    ref: ref
  }, props), icon, jsx(A11yText, null, label)));
};

function MarkdownField(_ref2) {
  let {
    field,
    errors,
    value,
    onChange
  } = _ref2;
  const htmlID = "ks-input-".concat(field.path);
  const accessError = errors.find(error => error instanceof Error && error.name === 'AccessDeniedError');
  let [tools, setTools] = useState([]);
  let toolbar = useMemo(() => {
    return jsx("div", {
      css: {
        display: 'flex',
        paddingTop: gridSize
      }
    }, tools.map(tool => {
      let onClick = () => {
        tool.action();
      };

      return jsx(IconToolbarButton, {
        key: tool.label,
        icon: jsx(tool.icon, null),
        onClick: onClick,
        label: tool.label
      });
    }));
  }, [tools]);
  if (accessError) return null;
  return jsx(FieldContainer, {
    css: [styles, {
      '.cm-s-mirrormark .CodeMirror-scroll': {
        paddingTop: gridSize,
        paddingLeft: gridSize
      }
    }]
  }, jsx(FieldLabel, {
    htmlFor: htmlID,
    field: field,
    errors: errors
  }), jsx("div", {
    css: {
      border: "1px ".concat(colors.N20, " solid"),
      borderRadius,
      paddingBottom: gridSize
    }
  }, toolbar, jsx(Controlled, {
    value: value,
    onBeforeChange: (editor, data, value) => {
      onChange(value);
    },
    options: {
      mode: 'gfm',
      theme: 'default mirrormark',
      tabSize: '2',
      lineWrapping: true,
      addModeClass: true
    },
    editorDidMount: editor => {
      setTools(getTools(editor));
    }
  })));
}

export default MarkdownField;
